# -*- mode: perl -*-
# Configuration file
#
# 

use LXRng::Index::PgBatch;
use LXRng::Repo::Git;
use LXRng::Repo::Plain;
use LXRng::Search::Xapian;

#### PARAMS ####
my $my_url = 'ymmt-linux1:10180';
my $lxr_root = '/var/www/html/lxrng';
my $repo_root = '/var/www/html/lxrng/repo';

#### Linux ####
my $linux_repo = LXRng::Repo::Git
    ->new($repo_root . '/linux.git',
	  release_re => qr/^v[2345]\.([0-9]|\.)+$/,
	  author_timestamp => 0);
my $linux_index = LXRng::Index::PgBatch
    ->new(db_spec => 'dbname=linux;host=db;port=5432', 
	  db_user => "postgres", db_pass => "");
my $linux_search  = LXRng::Search::Xapian
    ->new($lxr_root . '/text-db/linux');

#### BusyBox ####
my $busybox_repo = LXRng::Repo::Git
    ->new($repo_root . '/busybox.git',
	  release_re => qr/^[0-9]_[0-9]+_.*$/,
	  author_timestamp => 0);
my $busybox_index = LXRng::Index::PgBatch
    ->new(db_spec => 'dbname=busybox;host=db;port=5432', 
          db_user => "postgres", db_pass => "");
my $busybox_search  = LXRng::Search::Xapian
    ->new($lxr_root . '/text-db/busybox');

#### glibc ####
my $glibc_repo = LXRng::Repo::Git
    ->new($repo_root . '/glibc.git',
	  release_re => qr/^glibc-.*$/,
	  author_timestamp => 0);
my $glibc_index = LXRng::Index::PgBatch
    ->new(db_spec => 'dbname=glibc;host=db;port=5432', 
          db_user => "postgres", db_pass => "");
my $glibc_search  = LXRng::Search::Xapian
    ->new($lxr_root . '/text-db/glibc');

#### u-boot ####
my $uboot_repo = LXRng::Repo::Git
    ->new($repo_root . '/u-boot.git',
	  release_re => qr/^v([0-9]|\.)+$/,
	  author_timestamp => 0);
my $uboot_index = LXRng::Index::PgBatch
    ->new(db_spec => 'dbname=u-boot;host=db;port=5432', 
          db_user => "postgres", db_pass => "");
my $uboot_search  = LXRng::Search::Xapian
    ->new($lxr_root . '/text-db/u-boot');

#### ltp ####
my $ltp_repo = LXRng::Repo::Git
    ->new($repo_root . '/ltp.git',
	  release_re => qr/20[0-9]+$/,
	  author_timestamp => 0);
my $ltp_index = LXRng::Index::PgBatch
    ->new(db_spec => 'dbname=ltp;host=db;port=5432', 
          db_user => "postgres", db_pass => "");
my $ltp_search  = LXRng::Search::Xapian
    ->new($lxr_root . '/text-db/ltp');

#### gcc ####
my $gcc_repo = LXRng::Repo::Git
    ->new($repo_root . '/gcc.git',
	  release_re => qr/gcc-.*-release$/,
	  author_timestamp => 0);
my $gcc_index = LXRng::Index::PgBatch
    ->new(db_spec => 'dbname=gcc;host=db;port=5432', 
          db_user => "postgres", db_pass => "");
my $gcc_search  = LXRng::Search::Xapian
    ->new($lxr_root . '/text-db/gcc');

#### binutils ####
my $binutils_repo = LXRng::Repo::Git
    ->new($repo_root . '/binutils.git',
	  release_re => qr/binutils-[0-9]_[0-9]+$/,
	  author_timestamp => 0);
my $binutils_index = LXRng::Index::PgBatch
    ->new(db_spec => 'dbname=binutils;host=db;port=5432', 
          db_user => "postgres", db_pass => "");
my $binutils_search  = LXRng::Search::Xapian
    ->new($lxr_root . '/text-db/binutils');

#### hostap ####
my $hostap_repo = LXRng::Repo::Git
    ->new($repo_root . '/hostap.git',
	  release_re => qr/hostap_.*$/,
	  author_timestamp => 0);
my $hostap_index = LXRng::Index::PgBatch
    ->new(db_spec => 'dbname=hostap;host=db;port=5432', 
          db_user => "postgres", db_pass => "");
my $hostap_search  = LXRng::Search::Xapian
    ->new($lxr_root . '/text-db/hostap');

##################################################################
return {
    'linux' => {
	'repository'  => $linux_repo,
	'index'       => $linux_index,
	'search'      => $linux_search,

	'base_url'    => 'http://' . $my_url . '/lxr',
	# Must be writable by httpd user:
	'cache'	      => $lxr_root . '/cache/linux',

	'fs_charset'  => 'iso-8859-1',
	# Tried successively
	'content_charset' => ['utf-8', 'iso-8859-1'],

	'languages'   => ['C', 'GnuAsm', 'Kconfig'],
	#'ctags_flags' => ["-I\@$LXRng::ROOT/lxr-ctags-quirks"],
	'ver_list'    => [$linux_repo->allversions],

	#'ver_default' => 'v2.6.35.13',

	'include_maps' => 
	    [
	     [qr|^arch/(.*?)/|, qr|^asm/(.*)|,
	      sub { "include/asm-$_[0]/$_[1]" }],
	     [qr|^include/asm-(.*?)/|, qr|^asm/(.*)|,
	      sub { "include/asm-$_[0]/$_[1]" }],
	     [qr|^|, qr|^asm/(.*)|,
	      sub { map { "include/asm-$_/$_[0]" }
		    qw(x86 arm arm64 riscv powerpc),
		    qw(mips mips64 ppc sh) }],
	     [qr|^|, qr|(.*)|,
	      sub { "include/$_[0]" }],
	     ],
	'search_size_limit' => 0,
    },

    'busybox' => {
	'repository'  => $busybox_repo,
	'index'       => $busybox_index,
	'search'      => $busybox_search,

	'base_url'    => 'http://' . $my_url . '/lxr',
	# Must be writable by httpd user:
	'cache'	      => $lxr_root . '/cache/busybox',

	'fs_charset'  => 'iso-8859-1',
	# Tried successively
	'content_charset' => ['utf-8', 'iso-8859-1'],

	'languages'   => ['C', 'GnuAsm', 'Kconfig'],
	#'ctags_flags' => ["-I\@$LXRng::ROOT/lxr-ctags-quirks"],
	'ver_list'    => [$busybox_repo->allversions],
	'search_size_limit' => 0,
    },

    'glibc' => {
	'repository'  => $glibc_repo,
	'index'       => $glibc_index,
	'search'      => $glibc_search,

	'base_url'    => 'http://' . $my_url . '/lxr',
	# Must be writable by httpd user:
	'cache'	      => $lxr_root . '/cache/glibc',

	'fs_charset'  => 'iso-8859-1',
	# Tried successively
	'content_charset' => ['utf-8', 'iso-8859-1'],

	'languages'   => ['C', 'GnuAsm', 'Kconfig'],
	#'ctags_flags' => ["-I\@$LXRng::ROOT/lxr-ctags-quirks"],
	'ver_list'    => [$glibc_repo->allversions],
	'search_size_limit' => 0,
    },

    'u-boot' => {
	'repository'  => $uboot_repo,
	'index'       => $uboot_index,
	'search'      => $uboot_search,

	'base_url'    => 'http://' . $my_url . '/lxr',
	# Must be writable by httpd user:
	'cache'	      => $lxr_root . '/cache/uboot',

	'fs_charset'  => 'iso-8859-1',
	# Tried successively
	'content_charset' => ['utf-8', 'iso-8859-1'],

	'languages'   => ['C', 'GnuAsm', 'Kconfig'],
	#'ctags_flags' => ["-I\@$LXRng::ROOT/lxr-ctags-quirks"],
	'ver_list'    => [$uboot_repo->allversions],
	'search_size_limit' => 0,
    },

    'ltp' => {
	'repository'  => $ltp_repo,
	'index'       => $ltp_index,
	'search'      => $ltp_search,

	'base_url'    => 'http://' . $my_url . '/lxr',
	# Must be writable by httpd user:
	'cache'	      => $lxr_root . '/cache/ltp',

	'fs_charset'  => 'iso-8859-1',
	# Tried successively
	'content_charset' => ['utf-8', 'iso-8859-1'],

	'languages'   => ['C', 'GnuAsm', 'Kconfig'],
	#'ctags_flags' => ["-I\@$LXRng::ROOT/lxr-ctags-quirks"],
	'ver_list'    => [$ltp_repo->allversions],
	'search_size_limit' => 0,
	#'ver_default' => '20130503',
    },

    'gcc' => {
	'repository'  => $gcc_repo,
	'index'       => $gcc_index,
	'search'      => $gcc_search,

	'base_url'    => 'http://' . $my_url . '/lxr',
	# Must be writable by httpd user:
	'cache'	      => $lxr_root . '/cache/gcc',

	'fs_charset'  => 'iso-8859-1',
	# Tried successively
	'content_charset' => ['utf-8', 'iso-8859-1'],

	'languages'   => ['C', 'GnuAsm', 'Kconfig'],
	#'ctags_flags' => ["-I\@$LXRng::ROOT/lxr-ctags-quirks"],
	'ver_list'    => [$gcc_repo->allversions],
	'search_size_limit' => 0,
    },

    'binutils' => {
	'repository'  => $binutils_repo,
	'index'       => $binutils_index,
	'search'      => $binutils_search,

	'base_url'    => 'http://' . $my_url . '/lxr',
	# Must be writable by httpd user:
	'cache'	      => $lxr_root . '/cache/binutils',

	'fs_charset'  => 'iso-8859-1',
	# Tried successively
	'content_charset' => ['utf-8', 'iso-8859-1'],

	'languages'   => ['C', 'GnuAsm', 'Kconfig'],
	#'ctags_flags' => ["-I\@$LXRng::ROOT/lxr-ctags-quirks"],
	'ver_list'    => [$binutils_repo->allversions],
	'search_size_limit' => 0,
    },

    'hostap' => {
	'repository'  => $hostap_repo,
	'index'       => $hostap_index,
	'search'      => $hostap_search,

	'base_url'    => 'http://' . $my_url . '/lxr',
	# Must be writable by httpd user:
	'cache'	      => $lxr_root . '/cache/hostap',

	'fs_charset'  => 'iso-8859-1',
	# Tried successively
	'content_charset' => ['utf-8', 'iso-8859-1'],

	'languages'   => ['C', 'GnuAsm', 'Kconfig'],
	#'ctags_flags' => ["-I\@$LXRng::ROOT/lxr-ctags-quirks"],
	'ver_list'    => [$hostap_repo->allversions],
	'search_size_limit' => 0,
    },
};
